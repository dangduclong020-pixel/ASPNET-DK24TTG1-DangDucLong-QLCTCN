@model QuanLyCTCN.Models.MucTieu

@{
    ViewData["Title"] = "Chỉnh sửa mục tiêu";
    ViewData["Subtitle"] = Model.TenMucTieu;
}

@section Styles {
    <link rel="stylesheet" href="~/css/muctieu.css" />
}

@section HeaderActions {
    <div class="d-flex gap-2">
        <a href="@Url.Action("Details", new { id = Model.MucTieuId })" class="muctieu-btn muctieu-btn-outline-primary">
            <i class="fas fa-eye muctieu-icon"></i> Xem chi tiết
        </a>
        <a href="@Url.Action("Index")" class="muctieu-btn muctieu-btn-outline-primary">
            <i class="fas fa-arrow-left muctieu-icon"></i> Quay lại danh sách
        </a>
    </div>
}

<div class="row justify-content-center">
    <div class="col-md-8 col-lg-6">
        <div class="muctieu-card">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="fas fa-edit text-primary me-2 muctieu-icon"></i>
                    Chỉnh sửa mục tiêu
                </h5>
            </div>
            <div class="card-body">
                <form asp-action="Edit" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="MucTieuId" />
                    <input type="hidden" asp-for="NguoiDungId" />

                    <div class="mb-3">
                        <label asp-for="TenMucTieu" class="form-label"></label>
                        <input asp-for="TenMucTieu" class="form-control" />
                        <span asp-validation-for="TenMucTieu" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="SoTienCan" class="form-label"></label>
                        <div class="input-group">
                            <input asp-for="SoTienCan" class="form-control" type="text" />
                            <span class="input-group-text">VND</span>
                        </div>
                        <span asp-validation-for="SoTienCan" class="text-danger"></span>
                        <input type="hidden" id="SoTienCanHidden" name="SoTienCan" value="@Model.SoTienCan" />
                    </div>

                    <div class="mb-3">
                        <label asp-for="SoTienDaTietKiem" class="form-label"></label>
                        <div class="input-group">
                            <input asp-for="SoTienDaTietKiem" class="form-control" type="number" min="0" step="1000" />
                            <span class="input-group-text">VND</span>
                        </div>
                        <div class="form-text">Số tiền đã tiết kiệm được</div>
                        <span asp-validation-for="SoTienDaTietKiem" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Han" class="form-label"></label>
                        <input asp-for="Han" class="form-control" type="date" />
                        <div class="form-text">Thời hạn hoàn thành mục tiêu</div>
                        <span asp-validation-for="Han" class="text-danger"></span>
                    </div>

                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <a href="@Url.Action("Details", new { id = Model.MucTieuId })" class="muctieu-btn muctieu-btn-outline-primary me-md-2">
                            <i class="fas fa-arrow-left muctieu-icon"></i> Quay lại
                        </a>
                        <button type="submit" class="muctieu-btn muctieu-btn-primary">
                            <i class="fas fa-save muctieu-icon"></i> Lưu thay đổi
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <div class="muctieu-card muctieu-mt-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Tiến độ hiện tại</h6>
                        <div class="muctieu-progress-bar muctieu-mb-2">
                            <div class="muctieu-progress-fill @(Model.PhanTramHoanThanh >= 100 ? "success" : Model.PhanTramHoanThanh >= 75 ? "info" : Model.PhanTramHoanThanh >= 50 ? "warning" : "danger")"
                                 style="width: @Model.PhanTramHoanThanh%"
                                 aria-valuenow="@Model.PhanTramHoanThanh"
                                 aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <small class="text-muted">@Model.PhanTramHoanThanh% hoàn thành</small>
                    </div>
                    <div class="col-md-6">
                        <h6>Thời gian còn lại</h6>
                        @if (Model.Han.HasValue)
                        {
                            var daysLeft = (Model.Han.Value - DateTime.Today).Days;
                            <div class="h6 mb-0">
                                @if (daysLeft > 0)
                                {
                                    <span class="text-success">@daysLeft ngày</span>
                                }
                                else if (daysLeft == 0)
                                {
                                    <span class="text-warning">Hết hạn hôm nay</span>
                                }
                                else
                                {
                                    <span class="text-danger">Quá hạn @Math.Abs(daysLeft) ngày</span>
                                }
                            </div>
                        }
                        else
                        {
                            <small class="text-muted">Không có thời hạn</small>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/muctieu.js"></script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function() {
            // Format số tiền khi load
            formatCurrencyInput($('input[name="SoTienCan"]')[0]);

            // Xử lý submit form để loại bỏ format số tiền
            $('form').on('submit', function(e) {
                cleanCurrencyInputs();
            });

            // Function để loại bỏ format số tiền trước khi submit
            function cleanCurrencyInputs() {
                // Đồng bộ hóa giá trị từ input text sang hidden input
                const currencyInputs = document.querySelectorAll('input[name="SoTienCan"]:not([type="hidden"])');
                currencyInputs.forEach(input => {
                    if (input.value) {
                        // Loại bỏ dấu chấm và khoảng trắng để gửi giá trị số thô
                        const cleanValue = input.value.replace(/\./g, '').replace(/\s/g, '');
                        console.log('Original value:', input.value, 'Cleaned value:', cleanValue);
                        // Cập nhật hidden input
                        const hiddenInput = document.getElementById('SoTienCanHidden');
                        if (hiddenInput) {
                            hiddenInput.value = cleanValue;
                        }
                    }
                });
            }

            // Function để format số tiền với dấu chấm phân cách
            function formatCurrencyInput(input) {
                if (!input) return;

                let isFormatted = false;
                let originalValue = input.value;

                // Store original value for form submission
                input.addEventListener('focus', function() {
                    if (isFormatted && this.value) {
                        // Remove formatting when focusing (allow raw number input)
                        const rawValue = this.value.replace(/\./g, '');
                        this.value = rawValue;
                        isFormatted = false;
                    }
                });

                input.addEventListener('blur', function() {
                    const currentValue = this.value.trim();
                    if (currentValue && !isFormatted) {
                        // Add formatting when blurring
                        const numericValue = parseFloat(currentValue.replace(/\./g, ''));
                        if (!isNaN(numericValue) && numericValue >= 0) {
                            this.value = formatNumber(numericValue);
                            isFormatted = true;
                            originalValue = currentValue;
                            
                            // Đồng bộ hóa với hidden input nếu có
                            const hiddenInput = document.getElementById('SoTienCanHidden');
                            if (hiddenInput) {
                                hiddenInput.value = currentValue;
                                // Disable input text để tránh conflict khi submit
                                this.disabled = true;
                            }
                        } else if (currentValue !== '') {
                            // If invalid, restore original value
                            this.value = originalValue || '';
                        }
                    }
                });

                input.addEventListener('input', function() {
                    // Allow only numbers during input (remove dots temporarily)
                    let cleanValue = this.value.replace(/[^\d]/g, '');

                    // Prevent leading zeros
                    if (cleanValue.length > 1 && cleanValue.startsWith('0')) {
                        cleanValue = cleanValue.substring(1);
                    }

                    this.value = cleanValue;
                    isFormatted = false;
                });

                // Initialize formatting if input has value
                if (input.value) {
                    const numericValue = parseFloat(input.value.replace(/\./g, ''));
                    if (!isNaN(numericValue) && numericValue >= 0) {
                        input.value = formatNumber(numericValue);
                        isFormatted = true;
                        originalValue = input.value.replace(/\./g, '');
                    }
                }
            }

            // Format number with Vietnamese thousand separators
            function formatNumber(number) {
                return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
            }
        });
    </script>
}
